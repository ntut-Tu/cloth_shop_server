databaseChangeLog:
  - changeSet:
      id: trigger-ledger_entry
      author: quinn
      preConditions:
        - onFail: CONTINUE
        - dbms:
            type: postgresql
      changes:
        - sql:
            splitStatements: false
            sql: |
              CREATE OR REPLACE FUNCTION create_platform_ledger()
              RETURNS TRIGGER AS $$
              DECLARE
                current_balance NUMERIC(10, 2);
              BEGIN
                -- 取得目前平台的 total_balance
                SELECT COALESCE(MAX(total_balance), 0) INTO current_balance FROM ledger_entry WHERE ledger_type = 'platform';
                
                -- 第一種平台抽成
                INSERT INTO ledger_entry (
                  ledger_type, transaction_type, amount, total_balance, transaction_date, notes, coupon_id
                )
                VALUES (
                  'platform', 'income',
                  (NEW.total_amount - 60) * 0.05,
                  current_balance + ((NEW.total_amount - 60) * 0.05),
                  NOW(), '平台抽成', NULL
                )
                RETURNING ledger_entry_id INTO current_balance;
                
                INSERT INTO platform_ledger_entry (
                  ledger_entry_id, order_id
                ) VALUES (
                  current_balance, NEW.order_id
                );
                
                -- 第二種平台優惠費用
                INSERT INTO ledger_entry (
                  ledger_type, transaction_type, amount, total_balance, transaction_date, notes, coupon_id
                )
                VALUES (
                  'platform', 'fee',
                  NEW.shipping_discount_amount,
                  current_balance - NEW.shipping_discount_amount,
                  NOW(), '平台優惠費用', NEW.fk_shipping_discount_id
                )
                RETURNING ledger_entry_id INTO current_balance;
                
                INSERT INTO platform_ledger_entry (
                  ledger_entry_id, order_id
                ) VALUES (
                  current_balance, NEW.order_id
                );
                
                RETURN NEW;
              END;
              $$ LANGUAGE plpgsql;
              
              CREATE TRIGGER order_ship_status_trigger
              AFTER UPDATE OF ship_status ON "order"
              FOR EACH ROW
              WHEN (NEW.ship_status = 'Completed')
              EXECUTE FUNCTION create_platform_ledger();
        - sql:
            splitStatements: false
            sql: |
              CREATE OR REPLACE FUNCTION create_vendor_ledger()
              RETURNS TRIGGER AS $$
              DECLARE
                store_rec RECORD;
                current_balance NUMERIC(10, 2);
              BEGIN
                FOR store_rec IN
                  SELECT * FROM store_order WHERE fk_order_id = NEW.order_id
                LOOP
                  -- 取得商家目前的 total_balance
                  SELECT COALESCE(MAX(total_balance), 0) INTO current_balance FROM vendor_ledger_entry vle
                  JOIN ledger_entry le ON vle.ledger_entry_id = le.ledger_entry_id
                  WHERE vle.vendor_id = store_rec.fk_vendor_id;
                  
                  -- 第三種商家售貨收入
                  INSERT INTO ledger_entry (
                    ledger_type, transaction_type, amount, total_balance, transaction_date, notes, coupon_id
                  )
                  VALUES (
                    'vendor', 'income',
                    store_rec.store_net_amount * 0.95,
                    current_balance + (store_rec.store_net_amount * 0.95),
                    NOW(), '售貨收入', NULL
                  )
                  RETURNING ledger_entry_id INTO current_balance;
                  
                  INSERT INTO vendor_ledger_entry (
                    ledger_entry_id, vendor_id, store_order_id
                  ) VALUES (
                    current_balance, store_rec.fk_vendor_id, store_rec.store_order_id
                  );
                  
                  -- 第四種商家優惠費用
                  INSERT INTO ledger_entry (
                    ledger_type, transaction_type, amount, total_balance, transaction_date, notes, coupon_id
                  )
                  VALUES (
                    'vendor', 'fee',
                    store_rec.store_discount_amount,
                    current_balance - store_rec.store_discount_amount,
                    NOW(), '優惠費用',
                    COALESCE(store_rec.seasonal_discount_id, store_rec.special_discount_id)
                  )
                  RETURNING ledger_entry_id INTO current_balance;
                  
                  INSERT INTO vendor_ledger_entry (
                    ledger_entry_id, vendor_id, store_order_id
                  ) VALUES (
                    current_balance, store_rec.fk_vendor_id, store_rec.store_order_id
                  );
                END LOOP;
                
                RETURN NEW;
              END;
              $$ LANGUAGE plpgsql;
              
              CREATE TRIGGER store_order_status_trigger
              AFTER UPDATE OF ship_status ON "order"
              FOR EACH ROW
              WHEN (NEW.ship_status = 'Completed')
              EXECUTE FUNCTION create_vendor_ledger();
              
