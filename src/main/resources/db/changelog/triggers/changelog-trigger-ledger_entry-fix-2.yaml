databaseChangeLog:
  - changeSet:
      id: fix-2-platform-ledger-function
      author: quinn
      preConditions:
        - onFail: CONTINUE
        - dbms:
            type: postgresql
      changes:
        - sql:
            splitStatements: false
            sql: |
              CREATE OR REPLACE FUNCTION create_platform_ledger()
              RETURNS TRIGGER AS $$
              DECLARE
                current_balance NUMERIC(10, 2);
                temp_ledger_entry_id INT;
              BEGIN
                SELECT COALESCE(total_balance, 0) INTO current_balance 
                FROM ledger_entry 
                WHERE ledger_type = 'platform'
                ORDER BY ledger_entry_id DESC 
                LIMIT 1;

                IF (NEW.total_amount - 60) * 0.05 != 0 THEN
                  INSERT INTO ledger_entry (
                    ledger_type, transaction_type, amount, total_balance, transaction_date, notes, coupon_id
                  )
                  VALUES (
                    'platform', 'income',
                    (NEW.total_amount - 60) * 0.05,
                    COALESCE(total_balance, 0) + ((NEW.total_amount - 60) * 0.05),
                    NOW(), '平台抽成', NULL
                  )RETURNING ledger_entry_id INTO temp_ledger_entry_id;
              
                  -- 更新 current_balance 避免下一個if用舊的資料
                  SELECT total_balance INTO current_balance
                  FROM ledger_entry 
                  WHERE ledger_entry_id = temp_ledger_entry_id;
              
                  INSERT INTO platform_ledger_entry (
                    ledger_entry_id, order_id
                  ) VALUES (
                    temp_ledger_entry_id,
                    NEW.order_id
                  );
                END IF;

                IF NEW.shipping_discount_amount != 0 THEN
                  INSERT INTO ledger_entry (
                    ledger_type, transaction_type, amount, total_balance, transaction_date, notes, coupon_id
                  )
                  VALUES (
                    'platform', 'fee',
                    NEW.shipping_discount_amount,
                    COALESCE(total_balance, 0) - NEW.shipping_discount_amount,
                    NOW(), '平台優惠費用', NEW.fk_shipping_discount_id
                  )RETURNING ledger_entry_id INTO temp_ledger_entry_id;
              
                  -- 更新 current_balance 避免下一個if用舊的資料  
                  SELECT total_balance INTO current_balance
                  FROM ledger_entry 
                  WHERE ledger_entry_id = temp_ledger_entry_id;

                  INSERT INTO platform_ledger_entry (
                    ledger_entry_id, order_id
                  ) VALUES (
                    temp_ledger_entry_id,
                    NEW.order_id
                  );
                END IF;

                RETURN NEW;
              END;
              $$ LANGUAGE plpgsql;

              DROP TRIGGER IF EXISTS order_ship_status_trigger ON "order";
              CREATE TRIGGER order_ship_status_trigger
              AFTER UPDATE OF ship_status ON "order"
              FOR EACH ROW
              WHEN (NEW.ship_status = 'Completed')
              EXECUTE FUNCTION create_platform_ledger();

  - changeSet:
      id: fix-vendor-ledger-function
      author: quinn
      preConditions:
        - onFail: CONTINUE
        - dbms:
            type: postgresql
      changes:
        - sql:
            splitStatements: false
            sql: |
              CREATE OR REPLACE FUNCTION create_vendor_ledger()
              RETURNS TRIGGER AS $$
              DECLARE
                store_rec RECORD;
                current_balance NUMERIC(10, 2);
                temp_ledger_entry_id INT;
              BEGIN
                FOR store_rec IN
                  SELECT * FROM store_order WHERE fk_order_id = NEW.order_id
                LOOP
                  SELECT COALESCE(total_balance, 0) INTO current_balance 
                  FROM ledger_entry 
                  WHERE ledger_type = 'vendor'
                    AND ledger_entry_id IN (
                      SELECT ledger_entry_id FROM vendor_ledger_entry WHERE vendor_id = store_rec.fk_vendor_id
                    )
                  ORDER BY ledger_entry_id DESC
                  LIMIT 1;

                  IF store_rec.store_net_amount * 0.95 != 0 THEN
                    INSERT INTO ledger_entry (
                      ledger_type, transaction_type, amount, total_balance, transaction_date, notes, coupon_id
                    )
                    VALUES (
                      'vendor', 'income',
                      store_rec.store_net_amount * 0.95,
                      COALESCE(total_balance, 0) + (store_rec.store_net_amount * 0.95),
                      NOW(), '售貨收入', NULL
                    )RETURNING ledger_entry_id INTO temp_ledger_entry_id;
                    
                    -- 更新 current_balance
                    SELECT total_balance INTO current_balance
                    FROM ledger_entry 
                    WHERE ledger_entry_id = temp_ledger_entry_id;
                    
                    INSERT INTO vendor_ledger_entry (
                      ledger_entry_id, vendor_id, store_order_id
                    ) VALUES (
                      temp_ledger_entry_id,
                      store_rec.fk_vendor_id,
                      store_rec.store_order_id
                    );
                  END IF;

                  IF store_rec.store_discount_amount != 0 THEN
                    INSERT INTO ledger_entry (
                      ledger_type, transaction_type, amount, total_balance, transaction_date, notes, coupon_id
                    )
                    VALUES (
                      'vendor', 'fee',
                      store_rec.store_discount_amount,
                      COALESCE(total_balance, 0) - store_rec.store_discount_amount,
                      NOW(), '優惠費用',
                      COALESCE(store_rec.seasonal_discount_id, store_rec.special_discount_id)
                    )RETURNING ledger_entry_id INTO temp_ledger_entry_id;
                    
                    -- 更新 current_balance
                    SELECT total_balance INTO current_balance
                    FROM ledger_entry 
                    WHERE ledger_entry_id = temp_ledger_entry_id;
                    
                    INSERT INTO vendor_ledger_entry (
                      ledger_entry_id, vendor_id, store_order_id
                    ) VALUES (
                      temp_ledger_entry_id,
                      store_rec.fk_vendor_id,
                      store_rec.store_order_id
                    );
                  END IF;
                END LOOP;

                RETURN NEW;
              END;
              $$ LANGUAGE plpgsql;

              DROP TRIGGER IF EXISTS store_order_status_trigger ON "order";
              CREATE TRIGGER store_order_status_trigger
              AFTER UPDATE OF ship_status ON "order"
              FOR EACH ROW
              WHEN (NEW.ship_status = 'Completed')
              EXECUTE FUNCTION create_vendor_ledger();
